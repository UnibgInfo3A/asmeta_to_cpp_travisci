<?xml version="1.0"?>
<project name="asmeta_to_cpp_travisci" default="test" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
	<property name="main.build.dir" value="build/main" />
	<property name="main.src.dir" value="src" />
	<property name="test.build.dir" value="build/test" />
	<property name="test.src.dir" value="test" />
	<property name="result.dir" location="docs" />
	<property name="result.classes.dir" location="${result.dir}/classes" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />

	<path id="classpath.base" />

	<path id="classpath.test">
		<pathelement location="lib/junit-4.11.jar" />
		<pathelement location="lib/hamcrest-core-1.3.jar" />
		<pathelement location="lib/asmeta.parser_1.0.0.jar" />
		<pathelement location="lib/asmeta.emf_1.0.0.jar" />
		<pathelement location="lib/asmeta.simulator_1.0.0.jar" />
		<pathelement location="lib/asmeta.cpp_codegen.jar" />
		<pathelement location="lib/org.eclipse.emf.common.jar" />
		<pathelement location="lib/org.eclipse.emf.ecore.jar" />
		<pathelement location="lib/log4j.jar" />
		<pathelement location="lib/jacocoant.jar" />
		<pathelement location="lib/org.eclipse.xtext_2.13.0.v20171020-0708.jar" />
		<pathelement location="lib/org.eclipse.xtext.xbase.lib_2.13.0.v20171020-0659.jar" />
		<pathelement location="lib/com.google.guava_21.0.0.v20170206-1425.jar" />
		<pathelement location="${main.build.dir}" />
		<path refid="classpath.base" />
	</path>


	<!--  Step 1: Import JaCoCo Ant tasks  -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="lib/jacocoant.jar" />
	</taskdef>

	<!-- delete all class files -->
	<!-- To run this: use "ant clean" -->
	<target name="clean">
		<delete>
			<fileset dir="${basedir}" includes="**/*.class" />
		</delete>
		<echo message="clean done" />
	</target>





	<target name="compile">
		<mkdir dir="${main.build.dir}" />
		<javac srcdir="${main.src.dir}" destdir="${main.build.dir}" includeantruntime="false">
			<classpath refid="classpath.base" />
		</javac>
	</target>

	<target name="build" depends="compile">
		<mkdir dir="${test.build.dir}" />
		<javac srcdir="${test.src.dir}" destdir="${test.build.dir}" includeantruntime="false">
			<classpath refid="classpath.test" />
		</javac>
		<echo message="Build done" />
	</target>

	<!-- Test and build all files  -->
	<!-- To run this: use "ant" (default) or "ant run" -->
	<target name="run" depends="build">
		<junit printsummary="on" haltonfailure="yes">
			<classpath>
				<path refid="classpath.test" />
				<pathelement location="${test.build.dir}" />
			</classpath>
			<formatter type="brief" usefile="false" />
			<batchtest>
				<fileset dir="${test.src.dir}" includes="**/*Test*.java" />
			</batchtest>
		</junit>
	</target>

	<target name="instrument" depends="compile">
		<!--  Step 2: Instrument class files  -->
		<jacoco:instrument destdir="${result.classes.instr.dir}">
			<fileset dir="${result.classes.dir}" />
		</jacoco:instrument>
	</target>

	<target name="test" depends="run, clean, instrument">
		<echo message="test coverage" />
		<!-- Step 2: Wrap test execution with the JaCoCo coverage task 	-->
		<jacoco:coverage>
			<junit fork="true" forkmode="once">
				<test name="test/asmeta_to_cpp_travisci/ParserTest" fork="true" />
				<classpath>
					<pathelement location="lib/junit-4.11.jar" />
					<pathelement location="lib/hamcrest-core-1.3.jar" />
					<pathelement location="lib/asmeta.parser_1.0.0.jar" />
					<pathelement location="lib/asmeta.emf_1.0.0.jar" />
					<pathelement location="lib/org.eclipse.emf.common.jar" />
					<pathelement location="lib/org.eclipse.emf.ecore.jar" />
					<pathelement location="lib/log4j.jar" />
					<pathelement location="lib/jacocoant.jar" />
					<pathelement location="${main.build.dir}" />
				</classpath>
			</junit>
		</jacoco:coverage>
	</target>
	<!--  export of jars for asmeta2 cpp  -->
	<property name="ASMETA" value="Z:\AgDocuments\google_drive\codice\research" />
	<property name="ASM_TOCPP_HOME" value="${ASMETA}\asmeta\code\experimental\asmetal2cpp" />
	<property name="ASM_TOCPP_CODE_GEN" value="${ASM_TOCPP_HOME}\asmetal2cpp_codegen" />
	<target name="export_jar_codegen">
		<jar destfile="./lib/asmeta.cpp_codegen.jar" basedir="${ASM_TOCPP_CODE_GEN}/bin" />
	</target>
</project>
